"{{{ Vim
"{{{ Plugin Setup
filetype plugin indent on
syntax enable
" let s:plugins["name"] = "author"
" as in github.com/author/name.
let s:plugins = {}
function! SetupMinpac() abort "{{{
	packadd minpac
	call minpac#init({'jobs': '1'})
	call minpac#add('k-takata/minpac', {'type': 'opt'})
	for plugin in items(s:plugins)
		call minpac#add(plugin[1] . '/' . plugin[0], {'type': 'opt'})
	endfor
endfunction "}}}
command! PackUpdate call SetupMinpac() | call minpac#update()
command! PackAdd for name in keys(s:plugins) | execute "packadd " . fnameescape(name) | endfor
"}}}
set exrc secure
set undofile undodir=~/.vim/undo
set directory=~/.vim/swap//
set path+=include
set viminfofile=~/.vim/viminfo
set hidden
set shell=/bin/bash
let s:plugins["vim-obsession"] = "tpope"
let s:plugins["vim-prosession"] = "dhruvasagar"
"}}}
"{{{ Editing | Config for input
let mapleader      = " "
let maplocalleader = ","

" Suspend from insert mode
inoremap  <C-O>

" Make Y consistent with D, C, etc
nnoremap Y y$

" Auto close (), {}, [], "", etc
let s:plugins["delimitMate"] = "Raimondi"
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" Repeatable change word
nnoremap c* *Ncgn
nnoremap c# #NcgN

set formatoptions=ro " Insert comment leader after newline
set formatoptions+=j " Remove comment leader when joining lines
set formatoptions+=q " Format comments when using gq
set formatoptions+=w " Soft line break
set formatoptions+=l " Dont break existing long lines

set textwidth=80
set tildeop

" TODO some better way of fixing spellcheck
nnoremap <silent><leader>ss :set spell<cr>1z=:set nospell<cr>

"}}}
"{{{ Command
cnoremap <C-Backspace> <C-w>
nnoremap q: <nop>
nnoremap q/ <nop>
nnoremap q? <nop>
nnoremap Q: q:
nnoremap Q/ q/
nnoremap Q? q?
"{{{ Wild menu
set wildmenu
set wildchar=<TAB>
set wildignorecase
set wildmode=list:longest
"}}}
"}}}
"{{{ Motion | Config for navigating vim
set whichwrap=<,>,[,]          " enable wrapping with cursor keys in all modes
set backspace=indent,eol,start " enable backspace
set virtualedit=onemore,block  " allow cursor one past the line, and anywhere in block mode

set ignorecase smartcase
set incsearch wrapscan
set magic

" Swap mark jump keys around
nnoremap ' `
nnoremap ` '

" virtual line move
nnoremap <silent> <expr> k (v:count==0?'gk':'k')
nnoremap <silent> <expr> j (v:count==0?'gj':'j')

set scrolloff=5
set sidescroll=1     " Enable side scrolling
set sidescrolloff=5
set nowrap           " Disable wrapping

let s:plugins["vim-surround"] = "tpope"
let s:plugins["vim-repeat"] = "tpope"
let s:plugins["vim-sexp"] = "guns"
let s:plugins["vim-sexp-mappings-for-regular-people"] = "tpope"
let g:sexp_filetypes = 'clojure,scheme,lisp,timl,c,cpp'
let g:sexp_enable_insert_mode_mappings=0
let s:plugins["vim-unimpaired"] = "tpope"
"}}}
"{{{ Display | How things get printed
set background="dark"
colorscheme kuro

set list listchars=eol:$,tab:│•,trail:•,extends:→,precedes:←,conceal:δ,nbsp:•

set hlsearch
" make <C-L> also clear highlighting, and update diff
if maparg('<C-L>', 'n') ==# ''
	if has('diff')
		nnoremap <silent> <C-L> :nohlsearch<bar>diffupdate<CR><C-L>
	else
		nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
	endif
endif

" Syntax
set synmaxcol=200
let g:sh_no_error=1
let g:c_comment_strings=1
let g:c_no_if0=1
let g:c_no_bracket_error=1
let g:c_curly_error=1
let g:load_doxygen_syntax=1

" Columns/Margins
set number relativenumber " show current line number and offsets
set colorcolumn=+0
augroup VIMRC_colorcolumn
	autocmd!
	autocmd BufReadPost quickfix setlocal colorcolumn=0
augroup END
set conceallevel=2 concealcursor=

set winminheight=0 winminwidth=0

set errorbells
set guioptions-=i
set guioptions-=T
set guioptions-=r
set guioptions-=L
"}}}
"{{{ Folding
"{{{ fancy fold function
"{{{ Expand tabs in a line
" because netrw help uses tabs
function! VIMRC_expand(line, tab) abort
	let l:line = a:line
	let l:newline = ''
	while strlen(l:line) > 0
		if l:line[0] == "\t"
			let l:newline .= strcharpart(a:tab, 0, &tabstop - (strdisplaywidth(l:newline) % &tabstop))
			let l:line = strpart(l:line, 1)
			while l:line[0] == "\t"
				let l:newline .= a:tab
				let l:line = strpart(l:line, 1)
			endwhile
		else
			let l:tabidx = stridx(l:line, "\t", 1)
			if l:tabidx > 0
				let l:newline .= strpart(l:line, 0, l:tabidx)
				let l:line = strpart(l:line, l:tabidx)
			else
				return l:newline . l:line
			endif
		endif
	endwhile
	return l:newline
endfunction
"}}}
function! VIMRC_fold_function() abort
	if &list
		let l:tabidx = stridx(&listchars, "tab:")
		let l:tabs = l:tabidx == -1 ? " " : strcharpart(&listchars[l:tabidx+4:], 0, 1)
		let l:tabe = l:tabidx == -1 ? " " : strcharpart(&listchars[l:tabidx+4:], 1, 1)
		let l:tab = l:tabs . repeat(l:tabe, &tabstop-1)
	else | let l:tab = repeat(" ", &tabstop)
	endif
	let l:end = ''
	if (&foldmethod ==? "marker")
		let l:end = split(&foldmarker, ',')[1]
	elseif (&foldmethod ==? "syntax")
		let l:end = substitute(getline(v:foldend), '^\s*\([])}]\|\w\+\|\).*$', '\1', '')
	endif
	let l:lines  = line('$')
	let l:folded = v:foldend - v:foldstart+1
	let l:lines = printf("│ %*d │ %4.1f%%", len(l:lines), l:folded, l:folded*100.0/l:lines)
	let l:width = (&textwidth ? &textwidth : 80) - 1
	let l:strlen = l:width - strdisplaywidth("..." . l:end)
	if exists('g:vimrc_foldexpand') && g:vimrc_foldexpand > 0
		let l:foldstr = printf("%.*S...%s", l:strlen, VIMRC_expand(getline(v:foldstart), l:tab), l:end)
	else
		let l:foldstr = printf("%.*S...%s", l:strlen, substitute(getline(v:foldstart), '\t', l:tab, 'g'), l:end)
	endif
	return printf("%-*S%s", l:width, l:foldstr, l:lines)
endfunction "}}}
" let g:vimrc_foldexpand
set foldtext=VIMRC_fold_function()
set foldmethod=syntax
set foldclose=
set foldopen+=insert
set foldlevelstart=0
let g:sh_fold_enabled=7
"}}}
"{{{ Status line
set ruler
set laststatus=2
"{{{ Helperfunctions
"{{{ Column
function! VIMRC_ShowsSigns() abort
	return 2 * (&signcolumn == "yes" || (&signcolumn != "no" && has_key(getbufinfo(bufname(''))[0], "signs")))
endfunction
function! VIMRC_Column() abort
	" width of numbers in margin
	let l:max_width = (&number ? max([len(line('$')), &numberwidth-1]) : 0)
	let l:max_width += &foldcolumn + VIMRC_ShowsSigns()
	let l:padding = max([3, l:max_width]) - len(col('.'))
	return repeat(" ", l:padding) . col('.')
endfunction
"}}}
"{{{ PrintIf string if non empty
function! PrintIf(fmt, str) abort
	return empty(a:str) ? '' : printf(a:fmt, a:str)
endfunction
"}}}
"{{{ Prints modifed status of the file
function! VIMRC_Modified() abort
	return ! &modifiable ? '-' :
	\      ! &modified   ? '' :
	\        &readonly   ? '!' : '+'
endfunction
"}}}
"}}}
let s:plugins["vim-fugitive"] = "tpope"
set statusline=%{VIMRC_Column()}
set statusline+= │ #%n
set statusline+= │ %{VIMRC_Modified()}%t
set statusline+=%{PrintIf(' │ %s',&filetype)}
set statusline+= │ %=
set statusline+= │ %<%F
set statusline+=%{PrintIf(' │ %s',fugitive#head())} 
augroup VIMRC_FixStatus
	autocmd!
	autocmd BufReadPost quickfix setlocal statusline= %{&filetype} │ %=%<
	autocmd BufReadPost quickfix setlocal statusline+=%{exists('w:quickfix_title')?'\ '.w:quickfix_title:''}
	autocmd BufReadPost netrw setlocal statusline= netrw │ %F %=%{PrintIf(' │ %s ',fugitive#head())}
augroup END
"}}}
"{{{ Keywords
let s:plugins["vim-man"] = "vim-utils"
set keywordprg=:Man
"}}}
"{{{ Git
let s:plugins["vim-fugitive"] = "tpope"
augroup VIMRC_fugitive
	autocmd!
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END
"}}}
"{{{ Org
let s:plugins["vim-orgmode"] = "jceb"
let g:org_todo_keywords=[['TODO(t)', 'STARTED(s)', 'DONE(d)'],
			\['CANCELED(c)']]
"}}}
"{{{ Ledger
let s:plugins["vim-ledger"] = "ledger"
let g:ledger_fold_blanks = 1
"}}}
"{{{ Netrw
let s:plugins["vim-vinegar"] = "tpope"
let g:netrw_http_cmd = "curl -so"
let g:netrw_liststyle = 4
let g:netrw_hide = 1
let g:netrw_list_hide = "\\~$"
let g:netrw_sizestyle = "h"
"}}}
"{{{ Buffer
let s:plugins["a.vim"] = "vim-scripts"
nnoremap <leader>b :ls<cr>:b<space>
nnoremap <leader>sb :ls<cr>:sb<space>
nnoremap gb :bnext<cr>
nnoremap gB :bprevious<cr>
"}}}
PackAdd
" vim: foldmarker={{{,}}}: foldlevel=0: foldmethod=marker
