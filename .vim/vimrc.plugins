" Package Management
packadd minpac
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
function! UseAddon(name, author)
	call minpac#add(a:author . '/' . a:name, {'type':'opt'})
	execute "packadd! " . fnameescape(a:name)
endfunction
"{{{ Sessions
call UseAddon('vim-prosession', 'dhruvasagar')
call UseAddon('vim-obsession', 'tpope')
set sessionoptions-=options
"}}}
"{{{ AutoClose (), {}, [], etc
call UseAddon("delimitMate", "Raimondi")
 " manually set later for compatibality with autocompletion
let delimitMate_expand_cr = 0
let delimitMate_expand_space = 1
"}}}
"{{{ Useful
" misc helpful addons for editing
call UseAddon("vim-surround", "tpope")
call UseAddon("vim-repeat", "tpope")
call UseAddon("vim-sexp", "guns")
call UseAddon("vim-sexp-mappings-for-regular-people", "tpope")
let g:sexp_filetypes = 'clojure,scheme,lisp,timl,c,cpp'
let g:sexp_enable_insert_mode_mappings=0
call UseAddon("vim-eunuch", "tpope")
call UseAddon("vim-unimpaired", "tpope")
call UseAddon("nerdcommenter", "scrooloose")
call UseAddon("traces.vim", "markonm")
nmap cx <plug>NERDCommenterToggle
"}}}
"{{{ Directory Browser
"call UseAddon("vim-vinegar", "tpope")
"nmap gu <Plug>VinegarUp
let g:netrw_http_cmd = "curl -so"
let g:netrw_liststyle = 2
let g:netrw_hide = 0
let g:netrw_sizestyle = "h"

" call UseAddon("nerdtree", "scrooloose")
" let NERDTreeAutoDeleteBuffer=1
call UseAddon("vim-dirvish", "justinmk")

" nmap - :e %:h<CR>
"}}}
"{{{ Buffer
call UseAddon("a.vim", "vim-scripts")
nnoremap <leader>b :ls<cr>:b<space>
nnoremap <leader>sb :ls<cr>:sb<space>
nnoremap gb :bnext<cr>
nnoremap gB :bprevious<cr>
call UseAddon("NrrwRgn", "chrisbra")
"}}}
"{{{ Syntax
call UseAddon("vim-plugin-AnsiEsc", "powerman")
call UseAddon("vim-cpp-enhanced-highlight", "octol")
call UseAddon("vim-ledger", "ledger")
" needed for some reason
packadd vim-ledger
"}}}
"{{{ Fold
call UseAddon("FastFold","Konfekt")
let g:fastfold_fold_command_suffixes =  ['x', 'X']
let g:fastfold_fold_movement_commands = []
let g:fastfold_minlines = 0
"}}}
"{{{ Wiki
call UseAddon('vimwiki', 'vimwiki')
let g:vimwiki_list = [{
\ 'path': '~/prog/wiki',
\ 'path_html': '~/prog/wiki/site/',
\ 'template_path': '~/prog/wiki/template/'
\}]
"}}}
"{{{ Keywords
call UseAddon("vim-man", "vim-utils")
call UseAddon("vinfo", "alx741")
set keywordprg=:Man
augroup VIMRC_Man
	autocmd!
	autocmd FileType man setlocal colorcolumn=0
augroup END

"}}}
"{{{ Git
call UseAddon("vim-fugitive", "tpope")
augroup VIMRC_fugitive
	autocmd!
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END
"}}}
"{{{ Snippets
let g:UltiSnipsSnippetDirectories=["snippet"]
call UseAddon("UltiSnips", "sirver")
let g:UltiSnipsExpandTrigger="<nop>"
let g:UltiSnipsJumpForwardTrigger="<nop>"
let g:UltiSnipsJumpBackwardTrigger="<nop>"
"}}}
"{{{ LSP
" Language server protocol
call UseAddon("async.vim", "prabirshrestha")
call UseAddon("vim-lsp",   "prabirshrestha")
let g:lsp_fold_enabled  = 0
let g:lsp_signs_enabled = 1 " enable signs
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_signs_error   = {'text': '▕▏'}
let g:lsp_signs_warning = {'text': '▕▏'}
let g:lsp_signs_hint    = {'text': '▕▏'}


if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd', '-background-index', '--clang-tidy', '--compile-commands-dir=build']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif
" Auto completion
call UseAddon("asyncomplete.vim", "prabirshrestha")
call UseAddon("asyncomplete-lsp.vim", "prabirshrestha")
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Snippets
call UseAddon('vim-lsp-snippets', 'thomasfaingnaert')
call UseAddon('vim-lsp-ultisnips', 'thomasfaingnaert')
"}}}
"{{{ Snippet/AutoComplete/ keybindings
" Tab to expand snippet/select next completion
" S-Tab to select prev completion
" Enter to select completion
" C-j to select next text insert point
let g:ulti_expand_or_jump_res = 0
function! VIMRC_Tab_Keybind()
	" try to expand first, otherwise try
	call UltiSnips#ExpandSnippetOrJump()
	return g:ulti_expand_or_jump_res != 0  ? "" :
	                        \ pumvisible() ? "\<C-N>" : "\<Tab>"
endfunction
inoremap <silent>          <Tab>   <C-R>=VIMRC_Tab_Keybind()<CR>
snoremap <silent>          <Tab>   <Esc>:call UltiSnips#JumpForwards()<CR>
snoremap <silent>          <S-Tab> <Esc>:call UltiSnips#JumpBackwards()<CR>
inoremap <silent> <expr>   <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap     <silent> <expr>   <CR>    pumvisible() ? "\<C-y>" : "\<Plug>delimitMateCR"
"
"}}}
"{{{ Ale
"call UseAddon("ale", "w0rp")
"nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"nmap <silent> <C-j> <Plug>(ale_next_wrap)
" let g:ale_lint_on_text_change = 0
" let g:ale_linters = {
" 	\ 'c': ['clangtidy'],
" 	\ 'cpp': ['clangtidy']
" 	\}
"
" let g:ale_sign_info    = '▕▏'
" let g:ale_sign_warning = '▕▏'
" let g:ale_sign_error   = '▕▏'
" hi ALEErrorSign   ctermfg=1 ctermbg=0 cterm=bold
" hi ALEWarningSign ctermfg=3 ctermbg=0 cterm=bold
" hi ALEInfoSign    ctermfg=4 ctermbg=0 cterm=bold
"}}}
"{{{ Make
" call UseAddon("neomake", "neomake")
" let g:neomake_error_sign   = {'text': '▕▏', 'texthl': 'NeomakeErrorSign'}
" let g:neomake_warning_sign = {'text': '▕▏', 'texthl': 'NeomakeWarningSign'}
" let g:neomake_message_sign = {'text': '▕▏', 'texthl': 'NeomakeMessageSign'}
" let g:neomake_info_sign    = {'text': '▕▏', 'texthl': 'NeomakeInfoSign'}
" let g:airline#extensions#neomake#enabled=0
" let g:neomake_cpp_ninja_maker = {
" 	\ 'args': ['-Cbuild'],
" 	\ 'errorformat': '../%f:%l:%c: %trror: %m,../%f:%l:%c: %tarning: %m,../%f:%l:%c: %tote: %m',
" 	\ }
" let g:neomake_c_ninja_maker = g:neomake_cpp_ninja_maker
"}}}
" vim: foldmarker={{{,}}}: foldlevel=0: foldmethod=marker
